@startuml main
package main <<Frame>> {
    GrpcClient <-> GrpcServer :  GRPC >    
}

package gRPC <<Frame>> {
    GrpcServer ..> API_RPC
    GrpcClient ..> API_RPC  
}

API "n" <--* "1" GrpcServer

class API {    
    bufferedListener : CircularFifoBuffer
}

interface API_RPC {
    + Connect()
    Equipment[init/start/stop]()
    Controller [start/stop]()
    + setAutoMode()
    DataStream[start/stop]()
    + setControlValue()
    + getServerState()
    + Disconnect()
}

package "logging FrameWork (log4j2)" <<Frame>> {
    logging <...o GrpcServer
    object logging << (F,#FF7700) >> {
        + print
        + Write to file
        + Publish on a tcp port
    }
}
API --> controller
package controller {
    class Controller {
        - {static} instance: Singleton
        
    }
    SimulatedEquipmentController --|> Controller
    AD10Controller --|> Controller
}

package datahandler <<Frame>> {
    class DataServer {
        - {static} instance: Singleton
    }
    API --> DataServer
    Equipment "1"<--* "1" DataServer
    
    package {
        class Observable {
            SensorData
            ControlData
            GenericData
        }
        Observable "1"<--* "1" DataServer
        DataServer "1" o--> "n" Observer
        Observable "1" o--> "n" Observer
        Equipment o..> Observable
    }
    

}

package equipment <<Frame>> {    
    ReplayEquipment --|> Equipment
    SimulatedEquipment --|> Equipment
    CompositeEquipment --|> Equipment
}
CompositeEquipment *--> hardwares
package hardwares <<Frame>> {
    class ArduinoHardware implements Harware, SensorHardware
    class AD10Hardware implements Harware, SensorHardware, ControlHardware
}

package observers <<Frame>> {
    Logging --|> Observer
    Storage --|> Observer
    CircularFifoBuffer --|> Observer
    RealTimePlotting --|> Observer
}







@enduml